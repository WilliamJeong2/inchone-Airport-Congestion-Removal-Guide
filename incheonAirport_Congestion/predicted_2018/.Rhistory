load("C:/Users/Han S.W/Desktop/분석/month_analysis.RData")
load("C:/Users/Han S.W/Desktop/분석/month_analysis.RData")
in_forecasting1<-getDataSet(df1$인원수,15,16,INPUT_NODES)
grid()
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "h", col = "red", axes=FALSE)
#x축에 1월~12월 범위 출력
axis(1,at=1:12, lab=c("1","2","3","4","5","6","7","8","9","10","11","12"))
#y축에 최대값 최솟값 설ㅈ
axis(2,ylim=c(500000,4000000))
lines(1:1,predicted_values1,type="o",lwd = "10", col="red")
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "t", col = "red", axes=FALSE)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "o", col = "red", axes=FALSE)
#x축에 1월~12월 범위 출력
axis(1,at=1:12, lab=c("1","2","3","4","5","6","7","8","9","10","11","12"))
#y축에 최대값 최솟값 설ㅈ
axis(2,ylim=c(500000,4000000))
grid()
data1$월요일<-gsub(",","",data1$월요일) #합계의 3자리 단위로 있는 ,를 삭제
data1$월요일<-as.numeric(data1$월요일) #합계를 numeric로
df_mon<-data.frame(일자=data1$요일,월요일=data1$월요일) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data1$월요일<-gsub(",","",data1$월요일) #합계의 3자리 단위로 있는 ,를 삭제
data1$월요일<-as.numeric(data1$월요일) #합계를 numeric로
df_mon1<-data.frame(일자=data1$요일,월요일=data1$월요일) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
#인러닝 값 대입
in_learning_mon1<-getDataSet(df_mon1$월요일,1,15,INPUT_NODES) #1월 값들 입력
#아웃러닝 값 대입
out_learning_mon1<-getDataSet(df_mon1$월요일,3,16,OUTPUT_NODES) #1월 값들 출력
#신경망 모델 중 하나인 nnet 패키지 함수를 이용하여 1월~12월 이용자 수 예측값 모델링 설정
model_mon1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
library(nnet) #신경망 모델 중 하나인 nnet 패키지 사용하기 위한 환경 설정
#신경망 모델 중 하나인 nnet 패키지 함수를 이용하여 1월~12월 이용자 수 예측값 모델링 설정
model_mon1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
#in_forecasting 에 1~12월 예측값 대입
in_forecasting_mon1<-getDataSet(df_mon1$월요일,15,16,INPUT_NODES)
#1~12월 이용자 수 예측값 출력
predicted_values_mon1<-predict(model_mon1,in_forecasting_mon1,type="raw")
predicted_values_mon1
# 2018년 1월 월요일~일요일 사용자 수 예측
data1$월요일<-gsub(",","",data1$월요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$월요일<-as.numeric(data1$월요일) #화요일를 numeric로
df_mon1<-data.frame(일자=data1$요일,월요일=data1$월요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$화요일<-gsub(",","",data1$화요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$화요일<-as.numeric(data1$화요일) #화요일를 numeric로
df_tue1<-data.frame(일자=data1$요일,화요일=data1$화요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$수요일<-gsub(",","",data1$수요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$수요일<-as.numeric(data1$수요일) #화요일를 numeric로
df_wed1<-data.frame(일자=data1$요일,수요일=data1$수요이) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$목요일<-gsub(",","",data1$목요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$목요일<-as.numeric(data1$목요일) #화요일를 numeric로
df_wed1<-data.frame(일자=data1$요일,수요일=data1$수요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$목요일<-gsub(",","",data1$목요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$목요일<-as.numeric(data1$목요일) #화요일를 numeric로
df_thu1<-data.frame(일자=data1$요일,목요일=data1$목요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$금요일<-gsub(",","",data1$금요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$금요일<-as.numeric(data1$금요일) #화요일를 numeric로
df_fri1<-data.frame(일자=data1$요일,금요일=data1$금요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$토요일<-gsub(",","",data1$토요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$토요일<-as.numeric(data1$토요일) #화요일를 numeric로
df_sat1<-data.frame(일자=data1$요일,토요일=data1$토요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
data1$일요일<-gsub(",","",data1$일요일) #월요일의 3자리 단위로 있는 ,를 삭제
data1$일요일<-as.numeric(data1$일요일) #화요일를 numeric로
df_sun1<-data.frame(일자=data1$요일,일요일=data1$일요일) # 요일->일자로, 월요일->월요일로 컬럼 이름 변경
#인러닝 값 대입
#2018년 1월 월요일~일요일
in_learning_mon1<-getDataSet(df_mon1$월요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_tue1<-getDataSet(df_tue1$화요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_wed1<-getDataSet(df_wed1$수요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_thu1<-getDataSet(df_thu1$목요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_fri1<-getDataSet(df_fri1$금요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_sat1<-getDataSet(df_sat1$토요일,1,15,INPUT_NODES) #1월 값들 입력
in_learning_sun1<-getDataSet(df_sun1$일요일,1,15,INPUT_NODES) #1월 값들 입력
#아웃러닝 값 대입
#2018년 1월 월요일~일요일
out_learning_mon1<-getDataSet(df_mon1$월요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_tue1<-getDataSet(df_tue1$화요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_wed1<-getDataSet(df_wed1$수요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_thu1<-getDataSet(df_thu1$목요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_fri1<-getDataSet(df_fri1$금요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_sat1<-getDataSet(df_sat1$토요일,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning_sun1<-getDataSet(df_sun1$일요일,3,16,OUTPUT_NODES) #1월 값들 출력
#신경망 모델 중 하나인 nnet 패키지 함수를 이용하여 1월~12월 이용자 수 예측값 모델링 설정
# 2018년 1월 월요일~일요일
model_mon1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_tue1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_wed1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_thu1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_fri1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_sat1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model_sun1<-nnet(in_learning_mon1,out_learning_mon1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
#in_forecasting 에 1~12월 예측값 대입
#2018년 1월 월요일~일요일 예측값 대입
in_forecasting_mon1<-getDataSet(df_mon1$월요일,15,16,INPUT_NODES)
in_forecasting_tue1<-getDataSet(df_tue1$화요일,15,16,INPUT_NODES)
in_forecasting_wed1<-getDataSet(df_wed1$수요일,15,16,INPUT_NODES)
in_forecasting_thu1<-getDataSet(df_thu1$목요일,15,16,INPUT_NODES)
in_forecasting_fri1<-getDataSet(df_fri1$금요일,15,16,INPUT_NODES)
in_forecasting_sat1<-getDataSet(df_sat1$토요일,15,16,INPUT_NODES)
in_forecasting_sun1<-getDataSet(df_sun1$일요일,15,16,INPUT_NODES)
#1~12월 이용자 수 예측값 출력
#2018년 1월 월요일~일요일 예측값 출력
predicted_values_mon1<-predict(model_mon1,in_forecasting_mon1,type="raw")
predicted_values_tue1<-predict(model_tue1,in_forecasting_mon1,type="raw")
predicted_values_wed1<-predict(model_wed1,in_forecasting_mon1,type="raw")
predicted_values_thu1<-predict(model_thu1,in_forecasting_mon1,type="raw")
predicted_values_fri1<-predict(model_fri1,in_forecasting_mon1,type="raw")
predicted_values_sat1<-predict(model_sat1,in_forecasting_mon1,type="raw")
predicted_values_sun1<-predict(model_sun1,in_forecasting_mon1,type="raw")
#2018년 1~12월 예측 값들을 predicted_2018에 대입하여 테이블 생성
predicted_2018_1<-c(predicted_values_mon1,predicted_values_tue1,predicted_values_wed1,predicted_values_thu1,predicted_values_fri1,predicted_values_sat1,predicted_values_sun1,)
#2018년 1~12월 예측 값들을 predicted_2018에 대입하여 테이블 생성
predicted_2018_1<-c(predicted_values_mon1,predicted_values_tue1,predicted_values_wed1,predicted_values_thu1,predicted_values_fri1,predicted_values_sat1,predicted_values_sun1)
#월요일~일요일 범위 설정 값 테이블 생성
day_2018<-1:7
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
#1월 월요일~일요일 예측값
Year2018_1<-data.frame(predicted_2018_1,day_2018)
#Year2018 테이블 출력
View(Year2018_1)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(day_2018~predicted_2018_1, Year2018_1, max)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018_1, xlab = "2018년", ylab = "인원수", ylim=c(200000,700000),type = "o", col = "red", axes=FALSE)
#x축에 월요일~일요일 범위 출력
axis(1,at=1:7, lab=c("월요일","화요일","수요일","목요일","금요일","토요일","일요일"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(200000,700000))
grid()
#y축에 최대값 최솟값 설정
axis(2,ylim=c(200000,500000))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(200000,500000))
#월요일~일요일 범위 설정 값 테이블 생성
day_2018<-c(월요일,화요일,수요일,목요일,금요일,토요일,일요)
#월요일~일요일 범위 설정 값 테이블 생성
day_2018<-c("월요일","화요일","수요일","목요일","금요일","토요일","일요일")
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
#1월 월요일~일요일 예측값
Year2018_1<-data.frame(predicted_2018_1,day_2018)
#Year2018 테이블 출력
View(Year2018_1)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(day_2018~predicted_2018_1, Year2018_1, max)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(predicted_2018_1~day_2018, Year2018_1, max)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(month_2018~predicted_2018, Year2018, max)
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
Year2018<-data.frame(predicted_2018,month_2018)
#2018년 1~12월 예측 값들을 predicted_2018에 대입하여 테이블 생성
predicted_2018<-c(predicted_values1, predicted_values2, predicted_values3, predicted_values4, predicted_values5, predicted_values6, predicted_values7, predicted_values8, predicted_values9, predicted_values10, predicted_values11, predicted_values12)
#1월~12월 범위 설정 값 테이블 생성
month_2018<-1:12
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
Year2018<-data.frame(predicted_2018,month_2018)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(month_2018~predicted_2018, Year2018, max)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(day_2018~predicted_2018_1, Year2018_1, max)
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
#1월 월요일~일요일 예측값
Year2018_1<-data.frame(predicted_2018_1,day_2018)
#Year2018 테이블 출력
View(Year2018_1)
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
#1월 월요일~일요일 예측값
Year2018_1<-data.frame(day_2018,predicted_2018_1)
#Year2018 테이블 출력
View(Year2018_1)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(day_2018~predicted_2018_1, Year2018_1, max)
View(predicted_2018_1)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "o", col = "red", axes=FALSE)
#x축에 1월~12월 범위 출력
axis(1,at=1:12, lab=c("1","2","3","4","5","6","7","8","9","10","11","12"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(500000,4000000))
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018_1, xlab = "2018년", ylab = "인원수", ylim=c(200000,600000),type = "o", col = "red", axes=FALSE)
#x축에 월요일~일요일 범위 출력
axis(1,at=1:7, lab=c("월요일","화요일","수요일","목요일","금요일","토요일","일요일"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(200000,600000))
plot(predicted_2018_1)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018_1, xlab = "2018년", ylab = "인원수", ylim=c(300000,600000),type = "o", col = "red", axes=FALSE)
#x축에 월요일~일요일 범위 출력
axis(1,at=1:7, lab=c("월요일","화요일","수요일","목요일","금요일","토요일","일요일"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(200000,600000))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(300000,600000))
grid()
save.image("C:/Users/Han S.W/Desktop/분석/month_analysis.RData")
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "o", col = "blue", axes=FALSE)
#x축에 1월~12월 범위 출력
axis(1,at=1:12, lab=c("1","2","3","4","5","6","7","8","9","10","11","12"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(500000,4000000))
lines(5:5,predicted_values5,type="o",lwd = "10", col="red")
lines(8:8,predicted_values8,type="o",lwd = "10", col="red")
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(month_2018~predicted_2018, Year2018, max)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018_1, xlab = "2018년1월", ylab = "인원수", ylim=c(300000,600000),type = "o", col = "red", axes=FALSE)
#x축에 월요일~일요일 범위 출력
axis(1,at=1:7, lab=c("월요일","화요일","수요일","목요일","금요일","토요일","일요일"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(300000,600000))
grid()
View(predicted_2018_1)
#Year2018 테이블 출력
View(Year2018_1)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(month_2018~predicted_2018, Year2018, max)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018, xlab = "2018년", ylab = "인원수", ylim=c(500000,4000000),type = "o", col = "blue", axes=FALSE)
#x축에 1월~12월 범위 출력
axis(1,at=1:12, lab=c("1","2","3","4","5","6","7","8","9","10","11","12"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(500000,4000000))
lines(5:5,predicted_values5,type="o",lwd = "10", col="red")
lines(8:8,predicted_values8,type="o",lwd = "10", col="red")
grid() #표의 범위 잘 보이도록 설정
