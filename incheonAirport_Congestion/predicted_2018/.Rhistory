out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df1$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_mon<-predict(model,in_forecasting,type="raw")
predicted_values_mon
#화요일
in_learning<-getDataSet(df2$인원수,1,15,INPUT_NODES)
out_learning<-getDataSet(df1$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df1$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_mon<-predict(model,in_forecasting,type="raw")
predicted_values_mon
#화요일
in_learning<-getDataSet(df2$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df2$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df2$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_tue<-predict(model,in_forecasting,type="raw")
predicted_values_tue
#수요일
in_learning<-getDataSet(df3$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df3$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df3$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_wed<-predict(model,in_forecasting,type="raw")
predicted_values_wed
#목요일
in_learning<-getDataSet(df4$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df4$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df4$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_thur<-predict(model,in_forecasting,type="raw")
predicted_values_thur
#금요일
in_learning<-getDataSet(df5$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df5$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df5$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_fri<-predict(model,in_forecasting,type="raw")
predicted_values_fri
#토요일
in_learning<-getDataSet(df6$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df6$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df6$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_sat<-predict(model,in_forecasting,type="raw")
predicted_values_sat
#일요일
in_learning<-getDataSet(df7$인원수,1,15,INPUT_NODES)
in_learning
out_learning<-getDataSet(df7$인원수,3,16,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df7$인원수,15,16,INPUT_NODES)
in_forecasting
predicted_values_sun<-predict(model,in_forecasting,type="raw")
predicted_values_sun
plot(xlab="요일",ylab = "주간 예상 이용객 수", type = "o")
plot.new()
axis(1, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
plot(real,xlab="4월",ylab="인원수",type="o",axes=FALSE)
plot(real,xlab="4월",ylab="인원수",type="o",axes=FALSE)
plot.new(axes=FALSE)
plot(1, type="n", axes=F, xlab="", ylab="")
axis(1, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
plot(1, type="o", axes=F, xlab="", ylab="")
plot(1, type="n", axes=F, xlab="", ylab="")
axis(1, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
empty.plot
empty.plot()
plot(1, type="n", axes=F, xlab="", ylab="")
emply.plot()
empty.plot()
plot(x,y=NULL,type = "n", axes=F)
plot(x, y=NULL,type = "n", axes=F)
real<-df1$인원수[0:0]
real
plot(1, type="n", axes=F, xlab="", ylab="")
axis(1, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
frame<-read.xlsx2(file.choose(,)1)
frame<-read.xlsx2(file.choose(),1)
frame
frame<-read.xlsx2(file.choose(),1)
frame
plot(frame$day,frame$degree,type="o", axes=F)
plot(frame$day,frame$degree,type="n", axes=F)
plot(frame$day,frame$degree,type="n", axes=F)
frame<-read.xlsx2(file.choose(),1)
frame
frame<-read.xlsx2(file.choose(),1)
frame
plot(frame$day,frame$degree,type="n", axes=F)
plot(frame$day,frame$degree, axes=F)
plot(frame$day,frame$degree,type="n", xlab="",ylab="",axes=F)
axis(1, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
axis(frame$day, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
plot.default()
plot.new()
axis(frame$day, at=1:7, lab = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
lines(1:1,predicted_values_mon,type="o",col="red")
real<-df1$인원수[0:0]
real
plot(frame$day,frame$degree,type="n", xlab="",ylab="",axes=F)
plot(real,xlab="4월",ylab="인원수",type="o",axes=FALSE)
lines(1:1,predicted_values_mon,type="o",col="red")
View(predicted_values_thur)
View(predicted_values_mon)
View(predicted_values_tue)
View(predicted_values_wed)
View(predicted_values_thur)
View(predicted_values_fri)
View(predicted_values_sat)
View(predicted_values_sun)
#2002년~2017년 1월 (2001년 1월 데이터 없음.)
INPUT_NODES<-2
HIDDEN_NODES<-INPUT_NODES*2
OUTPUT_NODES<-1
ITERATION<-500
start<-1
inlearning_start<-1
inlearning_end<-15
outlearning_start<-3
outlearning_end<-16
inforecasting_start<-(outlearning_end - INPUT_NODES)
#월요일
in_learning<-getDataSet(df1$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df1$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df1$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_mon<-predict(model,in_forecasting,type="raw")
predicted_values_mon
#월요일
in_learning<-getDataSet(df1$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df1$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
INPUT_NODES<-2
HIDDEN_NODES<-INPUT_NODES*2
OUTPUT_NODES<-1
ITERATION<-500
in_learning<-getDataSet(df$인원수,1,16,INPUT_NODES)
in_learning
out_learning<-getDataSet(df$인원수,3,17,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df$인원수,16,17,INPUT_NODES)
par(family="NanumGothic")
data<-read.xlsx2(file.choose(),1) #데이터가 될 엑셀 선택
data
data$degree<-gsub(",","",data$degree) #인원수의 3자리 단위로 있는 ,를 삭제
data$degree<-as.numeric(data$degree) #인원수를 numeric로
df<-data.frame(일자=data$date,인원수=data$degree)
df
plot(df,xlab="일자",ylab="인원수") #일자(date)와 인원수(degree)를 plot함수로 시각화 / 필드멍에 맞춰 변수명 수정
getDataSet<-function(item,from,to,size){ #배열을 한 칸씩 이동하며 정해진 구간을 탐색하는 알고리즘
dataframe<-NULL
to<-to-size+1
for(i in from:to) {
start<-i
end<-start+size-1
temp<-item[c(start:end)]
dataframe<-rbind(dataframe,t(temp))
}
return(dataframe)
}
INPUT_NODES<-2
HIDDEN_NODES<-INPUT_NODES*2
OUTPUT_NODES<-1
ITERATION<-500
in_learning<-getDataSet(df$인원수,1,16,INPUT_NODES)
in_learning
out_learning<-getDataSet(df$인원수,3,17,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_learning<-getDataSet(df$인원수,1,16,INPUT_NODES)
in_learning
out_learning<-getDataSet(df$인원수,3,17,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df$인원수,16,17,INPUT_NODES)
in_forecasting
predicted_values<-predict(model,in_forecasting,type="raw")
predicted_values
data<-read.xlsx2(file.choose(),1) #데이터가 될 엑셀 선택
source('~/Desktop/1월 요일별 인원수 예측.R', echo=TRUE)
data
data$mon<-gsub(",","",data$mon) #요일의 3자리 단위로 있는 ,를 삭제
data$tue<-gsub(",","",data$tue)
data$wed<-gsub(",","",data$wed)
data$thur<-gsub(",","",data$thur)
data$fri<-gsub(",","",data$fri)
data$sat<-gsub(",","",data$sat)
data$sun<-gsub(",","",data$sun)
data$mon<-as.numeric(data$mon) #인원수를 numeric로
data$tue<-as.numeric(data$tue)
data$wed<-as.numeric(data$wed)
data$thur<-as.numeric(data$thur)
data$fri<-as.numeric(data$fri)
data$sat<-as.numeric(data$sat)
data$sun<-as.numeric(data$sun)
df1<-data.frame(일자=data$date,인원수=data$mon)
df2<-data.frame(일자=data$date,인원수=data$tue)
df3<-data.frame(일자=data$date,인원수=data$wed)
df4<-data.frame(일자=data$date,인원수=data$thur)
df5<-data.frame(일자=data$date,인원수=data$fri)
df6<-data.frame(일자=data$date,인원수=data$sat)
df7<-data.frame(일자=data$date,인원수=data$sun)
df1
df2
df3
df4
df5
df6
df7
getDataSet<-function(item,from,to,size){ #배열을 한 칸씩 이동하며 정해진 구간을 탐색하는 알고리즘
dataframe<-NULL
to<-to-size+1
for(i in from:to) {
start<-i
end<-start+size-1
temp<-item[c(start:end)]
dataframe<-rbind(dataframe,t(temp))
}
return(dataframe)
}
#2002년~2017년 1월 (2001년 1월 데이터 없음.)
INPUT_NODES<-2
HIDDEN_NODES<-INPUT_NODES*2
OUTPUT_NODES<-1
ITERATION<-500
inlearning_start<-1
inlearning_end<-15
outlearning_start<-3
outlearning_end<-16
inforecasting_start<-(outlearning_end - INPUT_NODES)
inforecasting_start<-(outlearning_end - INPUT_NODES - 1)
inforecasting_start<-(outlearning_end - INPUT_NODES - 1)
inforecasting_start<-(outlearning_end - INPUT_NODES + 1)
#월요일
in_learning<-getDataSet(df1$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df1$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df1$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_mon<-predict(model,in_forecasting,type="raw")
predicted_values_mon
#화요일
in_learning<-getDataSet(df2$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df2$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df2$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_tue<-predict(model,in_forecasting,type="raw")
predicted_values_tue
#수요일
in_learning<-getDataSet(df3$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df3$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df3$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_wed<-predict(model,in_forecasting,type="raw")
predicted_values_wed
#목요일
in_learning<-getDataSet(df4$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df4$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df4$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_thur<-predict(model,in_forecasting,type="raw")
predicted_values_thur
#금요일
in_learning<-getDataSet(df5$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df5$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df5$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_fri<-predict(model,in_forecasting,type="raw")
predicted_values_fri
#토요일
in_learning<-getDataSet(df6$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df6$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df6$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_sat<-predict(model,in_forecasting,type="raw")
predicted_values_sat
#일요일
in_learning<-getDataSet(df7$인원수,inlearning_start,inlearning_end,INPUT_NODES)
in_learning
out_learning<-getDataSet(df7$인원수,outlearning_start,outlearning_end,OUTPUT_NODES)
out_learning
model<-nnet(in_learning,out_learning,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
in_forecasting<-getDataSet(df7$인원수,inforecasting_start,outlearning_end,INPUT_NODES)
in_forecasting
predicted_values_sun<-predict(model,in_forecasting,type="raw")
predicted_values_sun
install.packages("xlsx") #엑셀 파일 읽어 들이기 위한 패키지 설치
install.packages("nnet") #신경망 모델 중의 하나인 nnet 패키지 설치
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/server/libjvm.dylib') #맥에는 32bit자바가 없어서 따로 지정
library(xlsx) #rJava오류 시 32비트 java다운받기
library(nnet) #신경망 모델 중 하나인 nnet 패키지 사용하기 위한 환경 설정
par(family="NanumGothic")
data1<-read.xlsx2(file.choose(),1) #2002년~2017년 1월 데이터
library(readxl)
X2month <- read_excel("Documents/inchone-Airport-Congestion-Removal-Guide/incheonAirport_Congestion/predicted_2018/2month.xlsx")
View(X2month)
View(X2month)
View(X2month)
View(X2month)
View(X2month)
data1<-read.xlsx2(file.choose(),1) #2002년~2017년 1월 데이터
data2<-read.xlsx2(file.choose(),1) #2002년~2017년 2월 데이터
data3<-read.xlsx2(file.choose(),1) #2002년~2017년 3월 데이터
data3<-read.xlsx2(file.choose(),1) #2002년~2017년 3월 데이터
setwd(/Users/jeong/Documents/inchone-Airport-Congestion-Removal-Guide/incheonAirport_Congestion/predicted_2018)
setwd(\Users\jeong\Documents\inchone-Airport-Congestion-Removal-Guide\incheonAirport_Congestion\predicted_2018)
setwd("\Users\jeong\Documents\inchone-Airport-Congestion-Removal-Guide\incheonAirport_Congestion\predicted_2018")
setwd("/Users/jeong/Documents/inchone-Airport-Congestion-Removal-Guide/incheonAirport_Congestion/predicted_2018")
data3<-read.xlsx2(file.choose(),1) #2002년~2017년 3월 데이터
data4<-read.xlsx2(file.choose(),1) #2001년~2017년 4월 데이터
data5<-read.xlsx2(file.choose(),1) #2001년~2017년 5월 데이터
data6<-read.xlsx2(file.choose(),1) #2001년~2017년 6월 데이터
data7<-read.xlsx2(file.choose(),1) #2001년~2017년 7월 데이터
data8<-read.xlsx2(file.choose(),1) #2001년~2017년 8월 데이터
data9<-read.xlsx2(file.choose(),1) #2001년~2017년 9월 데이터
data10<-read.xlsx2(file.choose(),1) #2001년~2017년 10월 데이터
data11<-read.xlsx2(file.choose(),1) #2001년~2017년 11월 데이터
data12<-read.xlsx2(file.choose(),1) #2001년~2017년 12월 데이터
data1$합계<-gsub(",","",data1$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data1$합계<-as.numeric(data1$합계) #인원수를 numeric로
df1<-data.frame(일자=data1$요일,인원수=data1$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data2$합계<-gsub(",","",data2$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data2$합계<-as.numeric(data2$합계) #인원수를 numeric로
df2<-data.frame(일자=data2$요일,인원수=data2$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data3$합계<-gsub(",","",data3$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data3$합계<-as.numeric(data3$합계) #인원수를 numeric로
df3<-data.frame(일자=data3$요일,인원수=data3$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data4$합계<-gsub(",","",data4$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data4$합계<-as.numeric(data4$합계) #인원수를 numeric로
df4<-data.frame(일자=data4$요일,인원수=data4$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data5$합계<-gsub(",","",data5$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data5$합계<-as.numeric(data5$합계) #인원수를 numeric로
df5<-data.frame(일자=data5$요일,인원수=data5$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data6$합계<-gsub(",","",data6$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data6$합계<-as.numeric(data6$합계) #인원수를 numeric로
df6<-data.frame(일자=data6$요일,인원수=data6$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data7$합계<-gsub(",","",data7$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data7$합계<-as.numeric(data7$합계) #인원수를 numeric로
df7<-data.frame(일자=data7$요일,인원수=data7$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data8$합계<-gsub(",","",data8$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data8$합계<-as.numeric(data8$합계) #인원수를 numeric로
df8<-data.frame(일자=data8$요일,인원수=data8$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data9$합계<-gsub(",","",data9$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data9$합계<-as.numeric(data9$합계) #인원수를 numeric로
df9<-data.frame(일자=data9$요일,인원수=data9$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data10$합계<-gsub(",","",data10$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data10$합계<-as.numeric(data10$합계) #인원수를 numeric로
df10<-data.frame(일자=data10$요일,인원수=data10$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data11$합계<-gsub(",","",data11$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data11$합계<-as.numeric(data11$합계) #인원수를 numeric로
df11<-data.frame(일자=data11$요일,인원수=data11$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
data12$합계<-gsub(",","",data12$합계) #인원수의 3자리 단위로 있는 ,를 삭제
data12$합계<-as.numeric(data12$합계) #인원수를 numeric로
df12<-data.frame(일자=data12$요일,인원수=data12$합계) # 요일->일자로, 합계->인원수로 컬럼 이름 변경
#딥 러닝을 위한 getDataSet 함수
getDataSet<-function(item,from,to,size){ #배열을 한 칸씩 이동하며 정해진 구간을 탐색하는 알고리즘
dataframe<-NULL
to<-to-size+1
for(i in from:to) {
start<-i
end<-start+size-1
temp<-item[c(start:end)]
dataframe<-rbind(dataframe,t(temp))
}
return(dataframe)
}
INPUT_NODES<-2 # 데이터가 입력 되는 곳
HIDDEN_NODES<-INPUT_NODES*2 # 실질적인 데이터가 처리되는 곳
OUTPUT_NODES<-1 # 예측값이 출력
ITERATION<-500 #500번 반복
#인러닝 값 대입
in_learning1<-getDataSet(df1$인원수,1,15,INPUT_NODES) #1월 값들 입력
in_learning2<-getDataSet(df2$인원수,1,15,INPUT_NODES) #2월 값들 입력
in_learning3<-getDataSet(df3$인원수,1,15,INPUT_NODES) #3월 값들 입력
in_learning4<-getDataSet(df4$인원수,1,16,INPUT_NODES) #4월 값들 입력
in_learning5<-getDataSet(df5$인원수,1,16,INPUT_NODES) #5월 값들 입력
in_learning6<-getDataSet(df6$인원수,1,16,INPUT_NODES) #6월 값들 입력
in_learning7<-getDataSet(df7$인원수,1,16,INPUT_NODES) #7월 값들 입력
in_learning8<-getDataSet(df8$인원수,1,16,INPUT_NODES) #8월 값들 입력
in_learning9<-getDataSet(df9$인원수,1,16,INPUT_NODES) #9월 값들 입력
in_learning10<-getDataSet(df10$인원수,1,16,INPUT_NODES) #10월 값들 입력
in_learning11<-getDataSet(df11$인원수,1,16,INPUT_NODES) #11월 값들 입력
in_learning12<-getDataSet(df12$인원수,1,16,INPUT_NODES) #12월 값들 입력
#아웃러닝 값 대입
out_learning1<-getDataSet(df1$인원수,3,16,OUTPUT_NODES) #1월 값들 출력
out_learning2<-getDataSet(df2$인원수,3,16,OUTPUT_NODES) #2월 값들 출력
out_learning3<-getDataSet(df3$인원수,3,16,OUTPUT_NODES) #3월 값들 출력
out_learning4<-getDataSet(df4$인원수,3,17,OUTPUT_NODES) #4월 값들 출력
out_learning5<-getDataSet(df5$인원수,3,17,OUTPUT_NODES) #5월 값들 출력
out_learning6<-getDataSet(df6$인원수,3,17,OUTPUT_NODES) #6월 값들 출력
out_learning7<-getDataSet(df7$인원수,3,17,OUTPUT_NODES) #7월 값들 출력
out_learning8<-getDataSet(df8$인원수,3,17,OUTPUT_NODES) #8월 값들 출력
out_learning9<-getDataSet(df9$인원수,3,17,OUTPUT_NODES) #9월 값들 출력
out_learning10<-getDataSet(df10$인원수,3,17,OUTPUT_NODES) #10월 값들 출력
out_learning11<-getDataSet(df11$인원수,3,17,OUTPUT_NODES) #11월 값들 출력
out_learning12<-getDataSet(df12$인원수,3,17,OUTPUT_NODES) #12월 값들 출력
#신경망 모델 중 하나인 nnet 패키지 함수를 이용하여 1월~12월 이용자 수 예측값 모델링 설정
model1<-nnet(in_learning1,out_learning1,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model2<-nnet(in_learning2,out_learning2,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model3<-nnet(in_learning3,out_learning3,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model4<-nnet(in_learning4,out_learning4,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model5<-nnet(in_learning5,out_learning5,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model6<-nnet(in_learning6,out_learning6,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model7<-nnet(in_learning7,out_learning7,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model8<-nnet(in_learning8,out_learning8,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model9<-nnet(in_learning9,out_learning9,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model10<-nnet(in_learning10,out_learning10,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model11<-nnet(in_learning11,out_learning11,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
model12<-nnet(in_learning12,out_learning12,size=HIDDEN_NODES,linout = TRUE,rang = 0.1,skip=TRUE,maxit = ITERATION)
#in_forecasting 에 1~12월 예측값 대입
in_forecasting1<-getDataSet(df1$인원수,15,16,INPUT_NODES)
in_forecasting2<-getDataSet(df2$인원수,15,16,INPUT_NODES)
in_forecasting3<-getDataSet(df3$인원수,15,16,INPUT_NODES)
in_forecasting4<-getDataSet(df4$인원수,16,17,INPUT_NODES)
in_forecasting5<-getDataSet(df5$인원수,16,17,INPUT_NODES)
in_forecasting6<-getDataSet(df6$인원수,16,17,INPUT_NODES)
in_forecasting7<-getDataSet(df7$인원수,16,17,INPUT_NODES)
in_forecasting8<-getDataSet(df8$인원수,16,17,INPUT_NODES)
in_forecasting9<-getDataSet(df9$인원수,16,17,INPUT_NODES)
in_forecasting10<-getDataSet(df10$인원수,16,17,INPUT_NODES)
in_forecasting11<-getDataSet(df11$인원수,16,17,INPUT_NODES)
in_forecasting12<-getDataSet(df12$인원수,16,17,INPUT_NODES)
#1~12월 이용자 수 예측값 출력
predicted_values1<-predict(model1,in_forecasting1,type="raw")
predicted_values2<-predict(model2,in_forecasting2,type="raw")
predicted_values3<-predict(model3,in_forecasting3,type="raw")
predicted_values4<-predict(model4,in_forecasting4,type="raw")
predicted_values5<-predict(model5,in_forecasting5,type="raw")
predicted_values6<-predict(model6,in_forecasting6,type="raw")
predicted_values7<-predict(model7,in_forecasting7,type="raw")
predicted_values8<-predict(model8,in_forecasting8,type="raw")
predicted_values9<-predict(model9,in_forecasting9,type="raw")
predicted_values10<-predict(model10,in_forecasting10,type="raw")
predicted_values11<-predict(model11,in_forecasting11,type="raw")
predicted_values12<-predict(model12,in_forecasting12,type="raw")
predicted_values1
predicted_values2
predicted_values3
predicted_values4
predicted_values5
predicted_values6
predicted_values7
predicted_values8
predicted_values9
predicted_values10
predicted_values11
predicted_values12
#2018년 1~12월 예측 값들을 predicted_2018에 대입하여 테이블 생성
predicted_2018_1<-c(predicted_values_mon1,predicted_values_tue1,predicted_values_wed1,predicted_values_thu1,predicted_values_fri1,predicted_values_sat1,predicted_values_sun1)
#월요일~일요일 범위 설정 값 테이블 생성
day_2018<-c("월요일","화요일","수요일","목요일","금요일","토요일","일요일")
View(predicted_2018_1)
#Year2018에 2018년 1~12월 까지의 이용자 수 범위와 예측값 가지는 테이블 생성
#1월 월요일~일요일 예측값
Year2018_1<-data.frame(day_2018,predicted_2018_1)
#Year2018 테이블 출력
View(Year2018_1)
#예측값을 기준으로 예측값이 낮은 순 부터 높은 순으로 1~12월 출력(오름차순)
aggregate(day_2018~predicted_2018_1, Year2018_1, max)
#2018년 1월~12월 예측값 점,선 그래프 출력
plot(predicted_2018_1, xlab = "2018년1월", ylab = "인원수", ylim=c(300000,600000),type = "o", col = "red", axes=FALSE)
plot(predicted_2018_1)
#x축에 월요일~일요일 범위 출력
axis(1,at=1:7, lab=c("월요일","화요일","수요일","목요일","금요일","토요일","일요일"))
#y축에 최대값 최솟값 설정
axis(2,ylim=c(300000,600000))
grid()
predicted_values_mon1
predicted_values2
